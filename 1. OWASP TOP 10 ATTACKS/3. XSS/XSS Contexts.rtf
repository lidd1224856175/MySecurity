{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red15\green112\blue1;\red133\green32\blue83;
\red251\green0\blue7;}
\paperw11900\paperh16840\margl1440\margr1440\vieww23520\viewh12500\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs62\fsmilli31248 \cf0 \expnd0\expndtw0\kerning0
0. Example Page\
\pard\pardeftab720\partightenfactor0

\fs32 \cf0 \
Throughout these examples I\'92ll use the following page HTML and I\'92ll move the reflection point around to show the different places you often find XSS and the characters needed for each context. The four areas of reflection have been highlighted in \cf2 blue\cf0 . The page could be generated with a URL along the lines of: \cf3 http://xss.example.com/page?id=\cf2 foo\cf3 &name=\cf2 Holly\cf3 &greenting=\cf2 Hello\cf3 &profile=\cf2 %2Fprofile%3Fid%3D132\cf4 \'a0\cf0 \
\pard\pardeftab720\partightenfactor0

\f1 \cf0 \
<html><body>\
<div id="\cf2 foo\cf0 ">\
<p>\cf2 Hello\cf0  <script>document.write('\cf2 Holly\cf0 !')</script></p>\
<a href="\cf2 /profile?id=132\cf0 ">Profile</a>\
</div>\
</body></html>\
\
\pard\pardeftab720\partightenfactor0

\f0\fs62\fsmilli31248 \cf0 1. Within the page body\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf0 \
<html><body>\
<div id="foo">\
<p>Hello \cf5 <script>alert(1)</script>\cf0 <script>document.write('Holly!')</script></p>\
<a href="/profile?id=132">Profile</a>\
</div>\
</body></html>\
\pard\pardeftab720\partightenfactor0

\f0\fs62\fsmilli31248 \cf0 \
2. Within a HTML tag\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf0 \
<html><body>\
<div id="\cf5 " onmouseover=alert(1)\cf0  ">\
<p>Hello <script>document.write('Holly!')</script></p>\
<a href="/profile?id=132">Profile</a>\
</div>\
</body></html>\
\pard\pardeftab720\partightenfactor0

\f0\fs62\fsmilli31248 \cf0 \
3. Within\'a0an a HREF attribute\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf0 \
<html><body>\
<div id="foo">\
<p>Hello <script>document.write('Holly!')</script></p>\
<a href="\cf5 javascript:alert(1)\cf0 ">Profile</a>\
</div>\
</body></html>\
\pard\pardeftab720\partightenfactor0

\f0 \cf0 \
The above reflection point is an interesting one because in this context the normally recommended fix of HTML entity encoding won\'92t work as the browser will entity decode anything within a HREF attribute! Additionally an attacker could simply replace the URL that the developer intended the link to point to with a link to a malicious site, causing a redirection if the user clicked the affected link. The lesson here is don\'92t allow reflection into the base of a HREF!\
\pard\pardeftab720\partightenfactor0

\fs62\fsmilli31248 \cf0 \
4. Within\'a0an existing script\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf0 \
<html><body>\
<div id="foo">\
<p>Hello <script>document.write('\cf5 ');alert(1);//\cf0 !')</script></p>\
<a href="/profile?id=132">Profile</a>\
</div>\
</body></html>\
\pard\pardeftab720\partightenfactor0

\f0 \cf0 \
So as you can see there are plenty of places where an attacker can successfully get XSS payloads to fire without the requirement for < and > characters, with payloads such as \'91);alert(1);// it\'92s important to remember that all dangerous characters should be encoded to prevent attacks. This should include\
\pard\pardeftab720\partightenfactor0

\f1 \cf0 \
< > " ' / ;\
}