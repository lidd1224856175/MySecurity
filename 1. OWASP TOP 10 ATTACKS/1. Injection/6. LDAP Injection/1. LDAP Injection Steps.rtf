{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red127\green127\blue127;\red0\green0\blue0;\red251\green0\blue7;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw11900\paperh16840\margl1440\margr1440\vieww19400\viewh11220\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs32 \cf0 \ul \ulc0 LDAP Injection
\b0 \ulnone \
\
\pard\pardeftab720\sl280\partightenfactor0

\f1\fs28 \cf0 \expnd0\expndtw0\kerning0
LDAP Injection is an attack used to exploit web based applications that construct LDAP statements based on user input. When an application fails to properly sanitize user input, it\'92s possible to modify LDAP statements using a local proxy. This could result in the execution of arbitrary commands such as granting permissions to unauthorized queries, and content modification inside the LDAP tree. The same advanced exploitation techniques available in SQL Injection can be similarly applied in LDAP Injection.\
\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 In this section, we will cover LDAP attacks. LDAP is often used as a backend for authentication, especially in Single-Sign-On (SSO) solutions. LDAP has its own syntax that we will see in more detail, in the following examples.\
\pard\pardeftab720\sl340\sa280\partightenfactor0

\b \cf0 Example 1\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0 \cf0 In this first example, you connect to a LDAP server, using your username and password. In this instance, The LDAP server does not authenticate you, since your credentials are invalid.\
However, 
\b some LDAP servers authorise NULL Bind
\b0 : if null values are sent, the LDAP server will proceed to bind the connection, and the PHP code will think that the credentials are correct. To get the 
\f2 bind
\f1  with 2 null values, you will need to completely remove this parameter from the query. If you keep something like 
\f2 username=&password=
\f1  in the URL, these values will not work, since they won\'92t be null; instead, they will be empty.\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 \cb2 http://192.168.123.133/ldap/example1.php?username=hacker&password=hacker\
http://192.168.123.133/ldap/example1.php		\'97 You can authenticate using NULL!!\
\pard\pardeftab720\sl340\sa280\partightenfactor0

\b \cf0 \cb1 Example 2\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0 \cf3 \outl0\strokewidth0 \strokec3 The most common pattern of LDAP injection is to be able to inject in a filter. Here, we will see how you can use LDAP injection to bypass an authentication check.\
First, you need to learn a bit of LDAP syntax. When you are retrieving a user, based on its username, the following will be used:\
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf3 \cb2 (cn=[INPUT])\
\cb1 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 If you want to add more conditions and some boolean logic, you can use:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf3 \cb2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 A boolean OR using 
\f2 |
\f1 : 
\f2 (|(cn=[INPUT1])(cn=[INPUT2]))
\f1  to get records matching 
\f2 [INPUT1]
\f1  or 
\f2 [INPUT2]
\f1 .\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 A boolean AND using 
\f2 &
\f1 : 
\f2 (&(cn=[INPUT1])(userPassword=[INPUT2]))
\f1  to get records for which the 
\f2 cn
\f1  matches 
\f2 [INPUT1]
\f1  and the password matches 
\f2 [INPUT2]
\f1 .\cb1 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 As you can see, the boolean logic is located at the beginning of the filter. Since you're likely to inject after it, it's not always possible (depending on the LDAP server) to inject logic inside the filter, if it's just 
\f2 (cn=[INPUT])
\f1 .\
LDAP uses the wildcard * character very often, to match any values. This can be used for match everything * or just substrings (for example, 
\f2 adm*
\f1  for all words starting with 
\f2 adm
\f1 ). \
As with other injections, we will need to remove anything added by the server-side code. We can get rid of the end of the filter, using a NULL BYTE (encoded as 
\f2 %00
\f1 ). \
Here, we have a login script. We can see that if we use:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls2\ilvl0
\f2 \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 username=hacker&password=hacker
\f1  we get authenticated (this is the normal request).\
\ls2\ilvl0
\f2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 username=hack*&password=hacker
\f1  we get authenticated (the wildcard matches the same value).\
\ls2\ilvl0
\f2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 username=hacker&password=hac*
\f1  we don't get authenticated (the password may likely be hashed).\
\pard\tx566\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 Now, we will see how we can use the LDAP injection, in the 
\f2 username
\f1  parameter to bypass the authentication. Based on our previous tests, we can deduce that the filter probably looks like: \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf3 \cb2 (&(cn=[INPUT1])(userPassword=HASH[INPUT2]))\
\cb1 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 Where HASH is an unsalted hash (probably MD5 or SHA1). \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 LDAP supports several formats: `\{CLEARTEXT\}`, `\{MD5\}`, `\{SMD5\}` (salted MD5), `\{SHA\}`, `\{SSHA\}` (salted SHA1), `\{CRYPT\}` for storing passwords. \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 Since 
\f2 [INPUT2]
\f1  is hashed, we cannot use it to inject our payload. \
Our goal here will be to inject inside 
\f2 [INPUT1]
\f1  (the username parameter). We will need to inject:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls3\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The end of the current filter using 
\f2 hacker)
\f1 .\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 An always-true condition (
\f2 (cn=*)
\f1  for example)\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 A 
\f2 )
\f1  to keep a valid syntax and close the first 
\f2 )
\f1 . \
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 A NULL BYTE (
\f2 %00
\f1 ) to get rid of the end of the filter.\
\pard\tx566\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 Once you put this together, you should be able to login as 
\f2 hacker
\f1  with any password. You can then try to find other users using the wildcard trick. For example, you can use 
\f2 a*
\f1  in the first part of the filter, and check who you are logged in as.\
In most cases, LDAP injection will allow only you to bypass authentication and authorisation checks. Retrieving arbitrary data (as opposed to just getting more results) is often really challenging or impossible.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f2 \cf0 \cb2 \outl0\strokewidth0 http://[yourlab]/ldap/example2.php?name=hacker)(cn=*))%00&password=asdfasdf
\f1 \cb2 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 \cb1 the variable 
\i $filter
\i0  will become to \'93\cf4 (&(cn=hacker)(cn=*))%00)(userPassword=[pass]))\cf0 \'94 which 
\i\b %00
\i0\b0  will get rid of all the following strings.\
}