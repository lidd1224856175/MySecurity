{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red191\green232\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww18080\viewh10460\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs32 \cf0 \ul \ulc0 mitm\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b0 \cf0 \ulnone \
To use it we need to install mitmproxy first.\
\
Then we could do \
							mitmproxy -s script.py\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 \ul Handlers\
\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 \ulnone {\listtext	\'95	}
\b0 start\
{\listtext	\'95	}clientconnect\
{\listtext	\'95	}request\
{\listtext	\'95	}serverconnect\
{\listtext	\'95	}responseheaders\
{\listtext	\'95	}response\
{\listtext	\'95	}error\
{\listtext	\'95	}clientdisconnect\
{\listtext	\'95	}done\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 \ul SQLi and mitmproxy (mitm-3.py) - Error Based\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b0 \cf0 \ulnone \
\pard\pardeftab720\ri-6423\sa480\partightenfactor0

\fs34 \cf0 \expnd0\expndtw0\kerning0
The objective of this is to create an inline script for mitmproxy that will allow us to test for SQL injection in every URL that has a parameter. So the process we need to do is for every URL that has parameters we need to replace each parameter value by FUZZ while conserving the rest of the parameter's values, instead of replacing all the values by FUZZ at once. Then we replace FUZZ string in each URL by each value in the injection's array.\
We then execute the request and match the result's content with the my Mysql errors in the errors array. Let's see the code. Let's go to the editor and open the file mitm-3.py. We have a few new imports. Copy from deepcopy. We need this to copy objects. And urlpass that will help us to pass the URLs. Then we have the request handler function which, whenever there is a query string it will call the injector function.\
The injector function has the arrays of errors, and the array of injections, similar to the ones we used in the SQLi scripts. Then we open a file to log the results, and then we use urlparse to get the query string. Then we need to split it by ampersand and obtain the length as to how many parameters we have. Once we know the length we do a while loop. For each iteration we're going to do a deepcopy of the object query in order to preserve the original and work in a new copy.\
We then replace the value of the parameter qlen minus one by the string FUZZ. \cb2 And in url_to_test we rebuild the URL.\cb1  The we cycle through injections and replace FUZZ by the injection string. Finally, we check the result content with the content in the errors array. If we have a match we write to the logs, and that's it. We have basic SQL injection capability included in mitmproxy.
\fs32 \kerning1\expnd0\expndtw0 \
}