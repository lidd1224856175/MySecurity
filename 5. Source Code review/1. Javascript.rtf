{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18520\viewh10960\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs34 \cf0 \ul \ulc0 Javascript\

\b0\fs24 \ulnone \
\pard\pardeftab720\partightenfactor0

\fs30 \cf0 Client-side JavaScript can, of course, be accessed without requiring any privileged access to the application, enabling you to perform a security-focused code review in any situation. A key focus of this review is to identify any vulnerabilities such as DOM-based XSS, which are introduced on the client component and leave users vulnerable to attack (see Chapter 12). A further reason for reviewing JavaScript is to understand what kinds of input validation are implemented on the client, and also how dynamically generated user interfaces are constructed. When reviewing JavaScript, you should be sure to include both .js files and scripts embedded in HTML content.\
\
The key APIs to focus on are those that read from DOM-based data and that\
write to or otherwise modify the current document, as shown in Table 19-12.\
\
1)  
\b Can be used to access DOM data that may be controllable via a crafted URL, and may therefore represent an entry point for crafted data to attack other application users.
\b0 \
\pard\pardeftab720\partightenfactor0
\cf1 I DESCRIPTION\
\pard\pardeftab720\partightenfactor0
\cf0 	document.location\
	document.URL\
	document.URLUnencoded\
	document.referrer\
	window.location\
\
2) 
\b Can be used to update the document\'92s contents and to dynamically execute JavaScript code. If attacker-controllable data is passed to any of these APIs, this may provide a way to execute arbitrary JavaScript within a victim\'92s browser.
\b0 \
\
	document.write()\
	document.writeln()\
	document.body.innerHtml\
	eval()\
	window.execScript()\
	window.setInterval()\
	window.setTimeout()\
}