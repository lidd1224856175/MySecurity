{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red244\green244\blue244;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-latin\}}{\leveltext\leveltemplateid2\'01\'01;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww19560\viewh12640\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf0 \ul \ulc0 SQLMAP
\b0\fs24 \ulnone \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0

\fs28 \cf0 \
http://niiconsulting.com/checkmate/2014/01/from-sql-injection-to-0wnage-using-sqlmap/\
\
\pard\pardeftab720\partightenfactor0

\f1 \cf0 \cb2 \expnd0\expndtw0\kerning0
SQL Injection types used by SQLMap: \'96\
\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \cb2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Boolean Based Blind SQL Injection\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \cb2 \kerning1\expnd0\expndtw0 {\listtext	a	}\expnd0\expndtw0\kerning0
For SQLMap, a Boolean based blind is a technique where in there is a lot of involvement of HTTP request and response reading character by character, comparison and detecting the right output.\cb1 \
\ls1\ilvl1\cb2 \kerning1\expnd0\expndtw0 {\listtext	b	}\expnd0\expndtw0\kerning0
Once a vulnerable parameter is detected, SQLMap replaces or appends syntactically valid SQL statements for which we can expect some output.\cb1 \
\ls1\ilvl1\cb2 \kerning1\expnd0\expndtw0 {\listtext	c	}\expnd0\expndtw0\kerning0
Say, there is an original un-tampered request with a vulnerable parameter, it has certain response and in next stage there is a request-response from an injected statement, then SQLMap performs comparison between these two responses.\cb1 \
\ls1\ilvl1\cb2 \kerning1\expnd0\expndtw0 {\listtext	d	}\expnd0\expndtw0\kerning0
The tool uses 
\i bisection algorithm 
\i0 to fetch each character of the response with a maximum of seven HTTP requests and comparing their responses.\cb1 \
\ls1\ilvl1\cb2 \kerning1\expnd0\expndtw0 {\listtext	e	}\expnd0\expndtw0\kerning0
Where the output is not within the clear-text plain charset, sqlmap will adapt the algorithm with bigger ranges to detect the output.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \cb2 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Time Based Blind SQL Injection\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \cb2 \kerning1\expnd0\expndtw0 {\listtext	a	}\expnd0\expndtw0\kerning0
\'93Time based\'94 itself suggests that there is some comparison on the basis of time the request and response by injecting syntactically valid SQL statement to the vulnerable parameter.\cb1 \
\ls1\ilvl1\cb2 \kerning1\expnd0\expndtw0 {\listtext	b	}\expnd0\expndtw0\kerning0
SQLMap uses SQL statements which put the back-end database on hold to return for a certain number of seconds.\cb1 \
\ls1\ilvl1\cb2 \kerning1\expnd0\expndtw0 {\listtext	c	}\expnd0\expndtw0\kerning0
Using the same technique i.e. bisection algorithm to inference the output character by character, SQLMap compares various HTTP responses time with the original request.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \cb2 \kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Error-Based SQL Injection\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \cb2 \kerning1\expnd0\expndtw0 {\listtext	a	}\expnd0\expndtw0\kerning0
The tool uses SQL statements which would provoke the target database to generate database-specific error.\cb1 \
\ls1\ilvl1\cb2 \kerning1\expnd0\expndtw0 {\listtext	b	}\expnd0\expndtw0\kerning0
HTTP response to such request is then parsed by sqlmap in search of DBMS error messages containing the injected pre-defined chain of characters and the subquery statement output within.\cb1 \
\ls1\ilvl1\cb2 \kerning1\expnd0\expndtw0 {\listtext	c	}\expnd0\expndtw0\kerning0
This technique works only when the web application has been configured to disclose back-end database management system error messages.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \cb2 \kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
UNION Query\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \cb2 \kerning1\expnd0\expndtw0 {\listtext	a	}\expnd0\expndtw0\kerning0
A syntactically valid SQL Statement starting with an UNION ALL SELECT is injected to the vulnerable parameter.\cb1 \
\ls1\ilvl1\cb2 \kerning1\expnd0\expndtw0 {\listtext	b	}\expnd0\expndtw0\kerning0
UNION query based SQL injection works on the basis of the application behavior i.e. when the application passes the output of written SELECT query through certain loop or line of statements which allow the output to be printed on the page content.\cb1 \
\ls1\ilvl1\cb2 \kerning1\expnd0\expndtw0 {\listtext	c	}\expnd0\expndtw0\kerning0
In case the output is not cycled through any \'93for loop\'94 or other line of statements, SQLMap uses single entry UNION query SQL injection.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \cb2 \kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
Stacked Queries\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \cb2 \kerning1\expnd0\expndtw0 {\listtext	a	}\expnd0\expndtw0\kerning0
Stacked queries exploitation occurs when an application is supporting stacked queries. SQLMap adds a semi-colon (;) to the vulnerable parameter value and appends SQL statement which is to be executed.\cb1 \
\ls1\ilvl1\cb2 \kerning1\expnd0\expndtw0 {\listtext	b	}\expnd0\expndtw0\kerning0
Using this technique it is possible to run SQL statements other thank SELECT. This is useful for data manipulation, to get system read-write access and finally own the operating system.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \cb2 \kerning1\expnd0\expndtw0 {\listtext	6	}\expnd0\expndtw0\kerning0
Out-of-band\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \cb2 \kerning1\expnd0\expndtw0 {\listtext	a	}\expnd0\expndtw0\kerning0
This technique uses a secondary or different communication channel to dump the output of the queries fired on the vulnerable application.\cb1 \
\ls1\ilvl1\cb2 \kerning1\expnd0\expndtw0 {\listtext	b	}\expnd0\expndtw0\kerning0
For example, the injection is made to a web application and a secondary channel such as DNS queries is used to dump the data back to the attacker domain.}